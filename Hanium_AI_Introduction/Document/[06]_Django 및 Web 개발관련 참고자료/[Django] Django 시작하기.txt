가상환경에 대한 고찰

# 가상환경을 사용하는 이유 #1
1) 하나의 호스트에서 여러 버전의 python을 동시에 사용 가능
2) 예를 들어 여러 버전의 Django를 동시에 사용 가능

# 가상환경을 사용하는 이유 #2
가상환경 없이 pip 모듈을 설치하여 사용하는 경우
1) 현재시점에 최신버전인 Django 1.1 버전 설치, A라는 기능을 사용한 프로젝트 진행
2) 미래시점에 최신버전인 Django 2.2 버전 출시, A라는 기능이 삭제됨
3) 미래시점에 최신버전인 Django 2.2 버전 업그레이드
4) 미래시점에 구버전 Django 1.1 버전으로 배포중인 프로젝트의 A 기능 작동 정지

# 참고자료
Ubuntu 가상환경으로 장고 시작하기:
https://siner308.github.io/2019/01/12/django-virtualenv-ko/

==================================================================
==================================================================
윈도우 테스트용 가상환경 생성

1) cmd.exe 실행, 가상환경 생성할 디렉토리로 이동
$ cd 프로젝트 폴더명

2) 가상환경 생성
$ python -m venv 프로젝트명

3) 가상환경 실행
$ 프로젝트명\Scripts\activate

4) 가상환경 pip 최신버전 업데이트
$ python -m pip install --upgrade pip

5) 가상환경 Django 설치
$ pip install django

6) 가상환경 Django 버전 확인
$ python
$ import django
$ print(django.get_version())

7) 가상환경 종료
$ deactivate

# 참고자료
윈도우 기반 가상환경 설치 및 장고 설치:
https://hongku.tistory.com/258

==================================================================
Django 시작하기 (Ubuntu 16.04 기반)

1) 가상환경 활성화
$ source venv/bin/activate			// 윈도우버전은 상기 설명 참고

2) 가상환경 Python 버전 체크
$ python --version

3) 가상환경 Django 설치
$ pip install django

4) 가상환경 Django 프로젝트 생성
$ django-admin startproject 프로젝트명

5) 가상환경 Django 프로젝트 실행
$ cd 프로젝트명
$ python manage.py runserver

6) settings.py 설정
$ vi 프로젝트명/settings.py

ALLOWED_HOSTS = ['*']

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

:wq!

7) 가상환경 Django 프로젝트 재실행
$ python manage.py runserver

8) 가상환경 Django 작동 확인
http://127.0.0.1:8000/
The install worked successfully! Congratulations! 메세지 확인

# 참고자료
Ubuntu 가상환경으로 장고 시작하기:
https://siner308.github.io/2019/01/12/django-virtualenv-ko/

==================================================================
==================================================================
Django 페이지추가 (서버종료 후 수정할 것)

1) app 생성 (cmd)
$ python manage.py startapp 앱이름

2) app을 프로젝트와 연결 (자식 디렉토리 안 settings.py)
INSTALLED_APPS = [
    '앱이름.apps.앱이름첫글자대문자Config',	// 형식에 맞게 라인추가
    'myapp.apps.MyappConfig',		// 예시
]

3) HTML 생성 (templates 디렉토리 생성)
생성한 앱 안에 templates 디렉토리 생성
templates 디렉토리 안 html 생성

4) 동작 함수 정의 (views.py)
def html파일명(request):			// 형식에 맞게 함수 정의
    return render(request, 'html파일명.html')
def index(request):				// 예시
    return render(request, 'index.html')

5) url 설계 (urls.py)
해당 url 접근 시 views.py의 함수 실행, 그 함수가 html 파일을 띄워주는 원리
Django Project 폴더를 Sources Root로 설정
import 앱이름.views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', 앱이름.views.index, name='index'),	// 하단 설명 참고
]

'' 같은 상황에서 myapp - views.py - index 함수를 실행시키라는 의미
'' 같은 상황 = 주소 뒤에 붙는 내용 의미
path의 이름을 index은 지정
ex) http://127.0.1:8000/			// index page 열림
     http://127.0.1:8000/admin/		// admin page 열림

6) 가상환경 Django 프로젝트 재실행
$ python manage.py runserver

# 참고자료
장고 앱 시작 및 연결관계:
https://ssungkang.tistory.com/entry/Django-02-Django-%EC%8B%9C%EC%9E%91-Hello-World-%EC%B6%9C%EB%A0%A5

==================================================================
Django css 적용

1) App의 바로 하위에 static 디렉토리 생성
css / js / img / assets 파일등을 넣어 관리

2) static 파일위치 설정 (settings.py)
import os
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

3) html static 연결하기 (html 코드에서)
static 로드 추가
css / js / img / assets 로드하는 태그에 '/static/' 추가
-> Ctrl + F 'assets', 'css', 'js' 검색하여 태그에 '/static/ 추가

ex)
<!DOCTYPE html>
{% load static %}
...
<head>
    <link href="/static/css/styles.css" rel="stylesheet" />	// '/static/' 추가
</head>
...

# 참고자료
Django - Ststic 파일 사용법:
https://galid1.tistory.com/298

==================================================================
==================================================================
PostgreSQL Window 설치:
https://dora-guide.com/postgresql-install/

PostgreSQL Linux 설치

1) apt-get 업데이트 (이미 설치되었으면 다음으로)
$ sudo apt-get update

2) postgresql 설치
$ sudo apt-get install postgresql postgresql-contrib

3) postgres 계정 변경 후 postgresql 실행
$ sudo -i -u postgres
$ psql

4) postgresql 종료 및 postgres 계정 로그아웃
$ \q
$ exit

# 참고자료
Ubuntu에 PostgreSQL 설치하고 기본 명령 살펴보기:
https://dejavuqa.tistory.com/16

==================================================================
Django - PostgreSQL 연동

# Window
1) SQL Shell 실행
create database 데이터베이스_이름;

2) SQL Shell 재실행 (생성한 데이터베이스로 접속)
...
Database [postgres] : 생성한 데이터베이스_이름
...
postgres 사용자의 암호: postgres 계정 비밀번호


# Linux = Ubuntu
1) psycopg2 설치 
$ pip install psycopg2-binary

2) Django 프로젝트를 위한 DB 생성 및 접속
$ sudo -u postgres createdb 데이터베이스_이름	// DB목록보기 \l
$ sudo -u postgres psql 데이터베이스_이름	// DB접속하기 


# 공통
3) 유저 생성 및 권한 설정
postgres=# create user 유저명 with password '비밀번호';		// 계정목록보기 \du
postgres=# alter role 유저명 set client_encoding to 'utf-8';
postgres=# alter role 유저명 set timezone to 'Asia/Seoul';
postgres=# grant all privileges on database 데이터베이스_이름 to 유저명;

postgres=# alter user 유저명 with superuser;			// superuser 권한넘기기
postgres=# alter user 유저명 with createdb;
postgres=# alter user 유저명 with createrole;
postgres=# alter user 유저명 with replication;
postgres=# alter user 유저명 with bypassrls;
postgres=# \du

4-1) Window settings.py DATABASES 설정
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '생성한 데이터베이스_이름',
        'USER': '생성한 유저명',
        'PASSWORD': '생성한유저비밀번호',
        'HOST': 'localhost',
        'PORT': '',
    }
}

4-2) Linux settings.py DATABASES 설정
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '생성한 데이터베이스_이름',
        'USER': '생성한 유저명',
        'PASSWORD': '생성한유저비밀번호',
        'HOST': 'localhost',
        'PORT': '',
    }
}

5) models.py 테이블 생성하기
class Post(models.Model):
    name = models.CharField(max_length=20)
    content = models.TextField()

6) 서버 적용 및 서버실행
python manage.py makemigrations
python manage.py migrate
python manage.py runserver
python manage.py runserver 0.0.0.0:8000	// Linux(Ubuntu)에서 실행시

7) 생성된 테이블 보기 및 조회
\dt
select * from 앱이름_테이블명;

# 참고자료
Window PostgreSQL - Django 연동:
https://doorbw.tistory.com/183

Ubuntu PostreSQL - Django 연동:
https://leop0ld.tistory.com/59

==================================================================
==================================================================
# 기타 참고자료

ssh Shell이 끊어져도 계속 실행되게 하는 방법(★추후 필독★):
https://ldgeao99.tistory.com/111

Django - PostgreSQL 연동하기(추후필독):
https://jungeunlee95.github.io/django/2019/06/19/Django-postgrsql-%EC%97%B0%EB%8F%99-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/

PostgreSQL 따라하기(책처럼 정리되어있음):
http://www.gurubee.net/postgresql/basic

PostgreSQL 개념:
https://m.blog.naver.com/PostView.nhn?blogId=alice_k106&logNo=220847310053&proxyReferer=undefined

PostgreSQL 우분투 설치 및 접속, 데이터생성:
https://dejavuqa.tistory.com/16

JDBC (PostgreSQL) 연결:
http://blog.naver.com/PostView.nhn?blogId=alice_k106&logNo=220847716233

PostgreSQL - Python 연동:
https://freeprog.tistory.com/100

PostgreSQL 스키마 관련 명령어:
https://blog.gaerae.com/2015/11/postgresql-clone-schema.html

==================================================================
# 디버그 참고자료
PostgreSQL No space left on device 오류:
https://khann.tistory.com/43
https://blog.1day1.org/493
https://xinet.kr/?p=1452

1) root 계정 로그인
2) inode 사용률 확인 (보통 /var/log 또는 /var/spool/mail 점유율 때문에 발생)
$ df -i
3) /var/log 삭제 또는 /var/spool/mail 삭제
$ sudo rm -rf /var/log/*
$ sudo rm -rf /var/spool/mail/*

PostgreSQL Problem running post-install step. Installation may not complete correctly. The database cluster initialisation failed. 오류:
https://hochoon-dev.tistory.com/entry/PostgreSQL-%EC%84%A4%EC%B9%98-%EC%A4%91-%EC%97%90%EB%9F%ACThe-database-cluster-initialisation-failed
