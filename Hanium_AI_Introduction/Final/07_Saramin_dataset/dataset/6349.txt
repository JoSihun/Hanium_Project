SK하이닉스
연구·실험·기술
작년 교내 사업단에서 주최하는 자율 주행 쓰레기 수거 로봇 대회에 참가하였습니다. 대회의 목표는 자율 청소 로봇으로 스테이지 위에 있는 종이컵들을 벽과 장애물을 피해서 수거하거나 스테이지 밖으로 밀어내는 것이었습니다. 로봇에 대하여 구상하는 과정에서 저와 조원 한 명의 의견이 갈렸습니다. 저는 로봇이 종이컵을 인식하여 찾아가는 시스템을 만들고 싶었고, 다른 조원은 종이컵을 찾아가는 것은 어렵기 때문에 장애물만 회피하도록 하고 종이컵은 지나가면서 부딪히는 걸로 밀어내자고 제안하였습니다. 후자는 분명 구현 난이도가 쉬웠기 때문에 다른 조원들도 처음에는 후자를 선호하는 분위기였습니다. 하지만 저는 자율 주행로봇을 만드는 대회인 만큼 확률성에 의존하는 로봇은 대회에 적합하지 못하며, 어렵더라도 스스로에게 의미가 남을 수 있는 결과물을 만들어보자고 설득하였습니다. 조원들은 저의 의견을 수용해주었고 저의 설계대로 로봇을 만들기 시작하였습니다.
그러나 대회의 규정이 변경되면서 저희 조는 위기를 맞이하였습니다. 기존에 쓰레기는 종이컵만 있었는데, 쓰레기 크기의 다양성을 위해서 생수병이 쓰레기로 추가된 것입니다. 제가 설계한 로봇은 종이컵과 장애물의 높이 차이를 인식하여 둘을 구별하였기 때문에, 장애물과 높이가 똑같은 생수병이 추가가 되면 생수병을 장애물로 인식하게 된 것입니다. 설계했던 로봇을 사용할 수 없어진 저희 조는 새로운 로봇을 구상해야 된다는 생각에 의욕을 상실하였습니다. 특히 아이디어를 제공한 저는 더욱 책임감을 느꼈으며, 문제를 해결하기 위해 해외에서 만든 다른 로봇들을 검색해보고 사용할 수 있는 센서들을 찾아보았습니다. 다행히 생수통이 투명한 것을 이용하여 불투명한 벽과 구별할 수 있는 센서를 찾았고 기존의 로봇에서 센서의 종류만 바꾸는 것으로 문제를 해결할 수 있었습니다. 그 결과 대회에서 저희 조의 로봇만이 장애물과 쓰레기를 구별하여 인식할 수 있는 로봇이었고, 대회 점수와 교수님들의 평가 모두 우수한 성적으로 받을 수 있었습니다.
저는 전자공학설계 과목을 이수하면서 텀 프로젝트로 교내 캡스톤 디자인 경진대회에 참가하였습니다. 프로젝트의 주제는 마이크로프로세서를 활용하여 디지털 온도계를 만드는 것이었고, 저는 온도계 기능에 디지털시계의 기능을 추가하여 스위치로 시계, 알람, 온도계 모드를 전환하여 사용할 수 있도록 구현하는 것을 목표로 잡았습니다. 일반적인 디지털시계는 마이크로프로세서에 구현되어있는 타이머기능을 사용하지만 저는 직접 만든 타이머를 사용하여 디지털시계를 구현해야 했습니다. 마이크로프로세서 내부의 모드전환을 위한 스위치의 입력감지 기능과 타이머기능이 같은 프로세스 영역에서 동작하여 서로 충돌했기 때문입니다. 따라서 타이머기능을 사용하여 시계기능을 구현하면 온도계기능과 같이 사용이 불가능하였고, 스위치기능을 사용하여 여러 모드를 구현하면 시계기능을 구현할 수 없었습니다. 하지만 저는 시계기능과 온도계기능을 동시에 사용하고 싶었고 두 기능이 충돌하지 않도록 타이머기능을 새롭게 만든 것입니다.
타이머기능을 만들기 위해서 기존의 타이머기능인 1초를 세는 코드를 설계해야 했습니다. 먼저 빈 명령어 하나가 동작하는데 걸리는 시간을 측정하였고, 이 빈 명령어가 반복하여 동작했을 때 1초가 되는 반복횟수를 찾아야 했습니다. 이 1초를 측정하는 프로그램이 디지털시계의 성능을 좌우하는 것이기 때문에 수십 번의 테스트가 필요하였고, 최대 10시간까지 오차가 발생하지 않는 최적의 타이머기능을 구현할 수 있었습니다.
스위치기능은 마이크로프로세서의 다른 기능과도 충돌이 많았기 때문에 다른 팀들은 스위치를 구현하지 못하였고, 온도계기능 하나만을 사용하는 대신 표현방식을 다양하게 구현하였습니다. 제 작품만이 스위치를 사용하여 온도계기능이 아닌 다른 기능을 동시에 구현한 유일한 온도계였습니다. 이는 시스템의 한계를 극복하고자 필요한 기능을 스스로 만들어 사용하였기 때문에 가능하였고, 대회에서도 이점을 인정받아 최고점수를 받을 수 있었습니다.
마이크로프로세서를 사용하여 디지털 온도계&시계 구현
기존 방식과 본인이 시도한 방식의 차이 : 시계를 구현하기 위해서는 마이크로프로세서의 Timer 기능을 사용해야 하지만 스스로 Timer를 구현해서 사용함.
새로운 시도를 하게 된 계기 : 스위치를 사용하여 시계와 알람, 온도계 모드를 전환시키고자 하였으나 스위치의 오작동이 발생하여 원인을 분석해본 결과 스위치 감지 기능과 Timer 기능의 프로세스 영역이 겹쳐서 발생한 오류라는 것을 알아냄
새로운 시도를 했을 때의 주변 반응 : 다른 팀에서는 스위치 동작을 구현하지 못하였고, 그로 인해 단일 동작만을 구현하여 다양한 기능을 스위치 조작을 통해 사용할 수 있도록 구현한 우리 조의 작품을 신기해 함
평소 시스템이나 회로를 테스트하고 문제점을 찾아 해결하는 것을 좋아하여 교내 여러 프로젝트에 참가하였고 팀에서 프로젝트의 진행상황을 검토하고 개선점을 찾는 역할을 담당하였습니다. 특히 하계 인턴과정에서 배운 테스트 케이스는 저의 문제해결능력을 더욱 체계적으로 만들어주었습니다.
저는 하계 인턴으로 IOT 전자명패와 차량모듈을 개발하는 임베디드 연구소의 IOT 개발팀에서 일하였습니다. 개발팀에서 받은 프로젝트는 전자명패에 데이터를 입력하는 PC 프로그램을 대체하는 안드로이드 어플리케이션을 개발하는 것이었고, 제가 담당한 업무는 테스트 케이스를 작성하여 그것을 기반으로 어플리케이션을 평가하고 문제점 및 개선점을 찾는 것이었습니다. 단순히 어플리케이션을 동작시키며 문제점을 찾는 방식과 달리 테스트 케이스를 문서화하여 평가하자 더 체계적으로 테스트를 진행 할 수 있었습니다. 특히 개발자 입장에서 기능의 목적에만 집중하여 예외적인 환경을 생각하지 못하는 경우가 많았습니다. 하지만 사용자는 사용법이 미숙하거나 실수를 하여 잘못된 정보를 입력할 수 있고, 그런 상황에 대한 예외처리가 구현되어있지 않다면 어플리케이션이 종료되는 치명적이 오류가 발생할 수 있었습니다. 이렇듯 시스템의 기능에만 집중하는 것이 아닌 시스템의 동작범위를 고려하고, 발생할 수 있는 문제점을 최대한 찾아내도록 테스트 케이스를 구성하는 것이 중요하다는 것을 배웠습니다.
인턴과정 이후 종합설계프로젝트에서 바로 테스트 케이스를 적용하여 프로젝트 완성도를 높일 수 있었습니다. 프로젝트 주제는 자율쓰레기수거로봇을 만드는 것으로, 로봇의 센서부분, 연산부분, 동작부분으로 나눠 각각 약 30가지 테스트 케이스를 만들었습니다. 자율로봇의 특성상 한 가지 기능에 변화를 주면 연관된 다른 부분에도 영향이 미치기 때문에 테스트 케이스를 통해 연동되는 기능들을 쉽게 파악할 수 있어서 개발에 큰 도움이 되었으며, 최종 마무리 작업에서도 놓치는 부분 없이 테스트를 할 수 있어 오작동을 예방할 수 있었습니다.
작년 여름방학 임베이디드 시스템에 대하여 더 자세히 배우기 위해서 교내 임베이디드 연구소에 인턴을 지원하였습니다. 하지만 막상 연구소에서 받은 프로젝트는 저에게 생소한 안드로이드 어플리케이션을 개발하는 내용이었습니다. 다행히 같은 팀에 배정받은 인턴 2명이 컴퓨터공학을 전공하여 도움을 받을 수 있었습니다.
우선 개발 환경에 익숙해지기 위해 인터넷 검색을 통하여 개발 프로그램을 공부하였습니다. 팀원들이 초심자를 위한 블로그나 강의 사이트를 알려주어 프로그램 설치 단계부터 기초적인 코드 문법, 레이아웃 설정 등 기본적인 지식을 쌓았습니다. 이를 바탕으로 다른 팀원이 코딩한 프로그램을 분석해보았고 모르는 문법이나 기능들을 알아가는 방식으로 공부를 하였습니다. 당장은 프로그램을 개발할 능력이 없었으나, 팀원들이 개발한 어플리케이션을 테스트해보고 사소한 문제점 정도는 혼자서도 수정할 수 있는 능력을 기르는 것을 목표로 하였습니다. 그 결과 프로젝트 중반에 이르러서는 전반적인 코드의 흐름을 해석할 수 있게 되었고 개발과정 중 한 부분을 담당하여 개발할 수 있는 실력이 되었습니다.
팀원과의 협업 과정에서 힘든 점도 있었습니다. 프로젝트 후반에 각자 담당한 부분을 하나로 합치는 과정에서 갈등이 많았습니다. 특히 한 팀원이 프로젝트를 독단적으로 개발을 진행시키면서 프로그램이 충돌하거나 프로그래밍의 방향이 달라서 팀원 사이에 갈등과 불화가 생겼습니다. 팀이 원활하게 프로젝트를 진행하기 위해서는 단순히 서로의 역할을 아는 것만으로는 부족하다는 것을 느꼈습니다. 팀원 3명이 마치 한 사람이 진행한 것처럼 서로의 진행상황을 공유하고 알아야 할 필요가 있었습니다. 그래서 점심시간 이후 1시간씩 자신 구현할 코드와 그 코드가 기존 코드에 미치는 영향들에 대해 회의하는 시간을 가졌습니다. 그 과정에서 자신이 수정한 코드가 다른 팀원에게 어느 정도 영향을 주는지 알 수 있었고, 그로인해 팀원이 느꼈을 불편함을 이해하게 되어 갈등을 해소할 수 있었습니다.