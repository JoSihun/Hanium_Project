LG전자(주)
전산전공
[컴퓨터 프로그래머라는 것]
제 생활기록부를 보면 중학교 1학년 때부터 제 장래희망은 컴퓨터 프로그래머였습니다. 사실 가만히 생각해보면 이 당시에는 그저 컴퓨터를 다루는게 익숙하고 컴퓨터 게임을 좋아했기 때문에 장래희망이 되었던 것입니다. 하지만 시간이 지나면서 점차 컴퓨터 프로그래머가 하는 일에 대해 자세히 알게 되었고, 알면 알수록 더 하고싶어지고 매력적으로 다가왔습니다. 그렇게 컴퓨터 프로그래머는 저의 진짜 장래희망이 되었습니다. 프로그래밍을 얼른 접해보고 싶은 마음에 고등학교때는 수능 준비로 바쁜 와중에도 부모님을 설득해서 컴퓨터 학원을 다니며 프로그래밍을 공부하기도 했었습니다.
결국 수능을 통해 제가 원하던 대학의 컴퓨터통신공학부에 입학하게 되었습니다. 입학한 후에는 다양한 전공 강의를 들었습니다. 전공 강의를 들으며 많은 프로젝트를 진행하며 C언어, C++, Java 등의 언어로 PC 애플리케이션, 모바일 애플리케이션, 커널 프로그래밍 등의 다양한 개발 경험도 쌓았습니다. 이러한 개발 뿐 아니라 소프트웨어 공학이나 인간컴퓨터상호작용과 같은 강의를 들으면서 프로젝트 관리, 리스크 관리, 요구사항 관리 등의 다양한 프로젝트 관련 지식과 User Interface, User eXperience 등의 사용자를 위한 프로그래밍에 대해서도 공부했습니다. 또한 정보보호를 들으며 보안과 해킹에 관한 공부를 했고, 인공지능, 정보검색 등을 공부하며 정보를 처리하는 것에 대해서도 배웠습니다. 이 외에도 더 많은 다양한 전공 분야에 대해 흥미를 갖고 공부를 하여 전공 역량을 쌓았습니다. 특히 소프트웨어 공학에 큰 흥미가 있어서 지속적으로 공부를 하는 중이며 몇년 뒤에는 PMP(Project Management Professional) 자격을 취득할 것이며 LG전자의 Home Entertainment 사업부에서 앞으로도 꾸준히 TV 시장을 선두하여 이끌 수 있도록 최고의 프로젝트 관리자이자 개발자가 되고 싶습니다.
[편리함을 꿈꾸다]
'무엇이 있으면 사람들이 편리하고 즐겁게 살 수 있을까?'
제가 무언가 새로운 아이디어를 떠올릴때면 항상 먼저 하는 생각입니다. 전공 강의에서 제출했던 과제를 보아도 저의 편리함 추구라는 목표가 잘 드러납니다. 4학년 1학기때 들었던 임베디드 시스템 강의에서 특허 명세서를 직접 써서 제출하는 기말 과제가 있었습니다. 전 이 과제에서 [기기간의 상호작용을 통한 개인의 편의 제공 시스템] 이라는 명칭으로 특허 명세서를 제출했습니다. 이 특허 명세서는 모바일 기기와 근거리 네트워크를 동시에 활용하여 특정 네트워크 포인트 근처의 모바일 기기 사용자가 원하는 환경, 서비스 등을 제공할 수 있도록 하는 시스템에 관한 내용이었습니다.
인간컴퓨터상호작용 강의에서는 UI와 UX를 고려한 프로그래밍을 하는 프로젝트가 있었습니다. 여기에서도 프로젝트 내내 어떠한 인터페이스가 사용자가 사용하기 가장 쉬울지에 초점을 맞추어 프로젝트를 진행했습니다. 그 결과 교수님과 타 수강생들에게 찬사를 받으며 프로젝트에서 A+를 받을 수 있었습니다.
저의 사용자 편의를 위한 꿈은 이제 단순히 떠올리는 생각이 아닌 하나의 큰 목표가 되었습니다. 이제는 제가 직접 LG전자에서 개발을 하면서 LG전자의 제품을 사용하는 사용자들에게 최고의 편의와 경험을 선사하게 할 것입니다.
[팀을 리드하다]
4학년 1학기 때 정보보호 강의를 들었습니다. 학기말 프로젝트로 정보보호에 관한 프로그램이나 알고리즘을 개발하는 과제가 있었습니다. 그런데 강의에선 이론적인 것만 다루다가 이 프로젝트에서는 직접 프로그램을 개발해야 했기 때문에 처음엔 막막했습니다. 하지만 팀원들의 추천으로 제가 팀장을 맡았기 때문에 어떻게든 팀을 이끌어야겠다고 생각했습니다.
먼저 프로젝트의 주제를 정하기 위한 회의를 진행했습니다. 그리고 저희는 소리를 이용한 암복호화 프로그램을 개발하기로 했습니다. 즉 암호화할 문자열을 입력하면 기존에 존재하는 암호화 알고리즘으로 1차적으로 암호화 한 다음에 저희의 매칭 알고리즘을 통해 암호화된 특정 문자열을 또 다시 특정 피치의 노트에 2차적으로 매칭 시켜 미디파일을 생성합니다. 이러한 과정을 통해 "텍스트" -> "암호화된 텍스트" -> "미디파일로 변환" 의 2중 암호화를 하게 되고, 복호화를 할때는 이와 반대의 과정을 거쳐 복호화 하게 됩니다.
이런 주제를 정한 뒤에 효율적인 프로젝트 진행을 위해 주기적인 모임을 정했습니다. 팀원이 7명이나 되는 꽤 많은 인원이었고 각자가 동아리 활동이나 기타 학업 활동으로 바빳기 때문에 매 회의마다 모두 다 참석하지는 못했지만 최대한 많이 참석할 수 있는 시간을 잡아서 모였습니다. 물론 저는 팀장이었기 때문에 모든 회의에 참석했습니다. 또한 참석하지 못한 팀원들이 회의 내용을 아는것이 프로젝트 진행에 효과적이라고 생각했기 때문에 모든 회의를 녹음하여 녹음파일을 따로 팀 게시판에 공유했습니다. 더불어 원활한 프로젝트 진행을 위한 버전 컨트롤을 위해 SVN을 적극 활용하여 각자의 개발 진행상황을 코멘트와 함께 업데이트하고 혹시나 문제가 생기면 언제든 이전 버전으로 돌아갈 수 있도록 프로젝트를 관리했습니다.
이렇게 만반의 준비를 하고 프로젝트를 시작했지만 초반엔 순탄하지 않았습니다. 회의에 상습적으로 빠지는 팀원들도 있었고 프로젝트를 분담 함에 있어서 비협조적인 팀원도 있었으며 개발 관련 지식이 부족하여 개발에 전혀 참여하지 못하는 팀원도 있었습니다. 하지만 그렇다고 개발을 잘 하는 사람들만 모아서 진행하는 것은 팀 프로젝트를 이끄는 팀장으로서 지양해야 한다고 생각했기 때문에 모든 팀원들에게 지속적으로 연락하고 독려하면서 최대한 프로젝트에 참여하고 심혈을 기울일 수 있도록 노력했습니다. 예를 들어 개발쪽으로 부족한 팀원들은 개발 대신 프레젠테이션이나 아이디어 제공에 집중하도록 업무를 분담했고 각자의 장점과 단점을 고려하여 업무를 효율적으로 분담하려고 노력했습니다. 그렇게 한학기동안 열심히 프로젝트를 진행했습니다.
다행히 마감 기한이 얼마 남지 않은 시점에 아슬아슬하게 프로그램을 완성했고, 마지막 프레젠테이션에서도 발표를 잘 했습니다. 또한 저희가 직접 이 프로그램을 사용하여 어떤식으로 암복호화가 이루어지는지 보여주는 데모 시연에서는 암호화를 통해 만들어진 미디 파일로 클래식 음악같은 연주를 선보여서 교수님과 타 수강생들의 많은 호응과 관심을 이끌어 냈습니다.
처음부터 끝까지 쉽지 않은 프로젝트 진행이었습니다. 특히 저 역시 다른 강의의 장기 프로젝트도 다수 진행하고 있던 학기였기 때문에 체력적으로 매우 힘들었지만 7명을 이끌어야 하는 팀장이라는 사실을 지속적으로 환기시키면서 책임감을 더욱 강하게 가지고 노력했습니다. 그와 더불어 마지막에 유종의 미를 거두었기 때문에 다른 프로젝트보다도 더 기억에 남는 프로젝트였습니다.
[생소했던 커널 프로그래밍]
4학년 1학기 때 운영체제 강의를 들었습니다. 이 강의에서는 3개의 단기 프로젝트를 진행했습니다. 먼저 첫번째 프로젝트는 "Linux Kernel 수정을 통한 새로운 System Call 추가" 였고, 두번째 프로젝트는 "Linux Kernel 에서의 가상 CPU 객체의 생성, 접근, 관리와 가상 프로세스 스케쥴링" 였고, 세번째 프로젝트는 "Linux Kernel 에서의 Memory Management 구현" 이었습니다. 이 강의를 듣기 전까지 Linux 환경에서 프로그래밍을 해본 적이 없었고 처음으로 Virtual Machine을 통한 Virtual OS를 사용하는 것이었기 때문에 그러한 사용상의 생소함으로 인한 어려움도 있었던데다가 Kernel 프로그래밍이라는 매우 민감하고 디버깅도 어려운 환경의 프로그래밍이라는 것이 저에겐 큰 난관이었습니다. 다행히 첫번째 프로젝트인 System Call 추가는 Kernel에 대한 공부를 조금만 했더니 쉽게 구현할 수 있었습니다.
하지만 두번째 프로젝트부터는 매우 힘들었습니다. 평소 개발하던 개발툴인 Visual Studio 에서처럼 쉽게 디버깅 할 수 있는 환경이 아니었기 때문에, 라이브러리의 제약도 있었고 코드를 다 짜고 나서 에러가 떴을 때 이게 컴파일 에러로 실행되지 않는 것인지, 런타임 에러로 실행되지 않는 것인지 알기 힘들었습니다. 또한 Kernel을 처음 건드려보는 것이었기 때문에 조금만 잘못 건드려도 Segmentation Fault나 Kernel Panic 상태가 빈번하게 발생했습니다. 그로 인해 Linux를 지우고 재설치 하는 것만 해도 꽤 많은 시간을 투자했습니다. 그럼에도 엄청 많은 시간을 투자했고, 2차 프로젝트에서 구현해야 했던 프로세스 스케쥴링 4가지 중에 Round Robin 스케쥴링을 제외한 FCFS(First Come First Served), SJF(Shortest Job First), SRT(Shortest Remaining Time) 스케쥴링은 성공적으로 구현했습니다.
그리고 마지막으로 가장 어려웠던 Memory Management 정책을 그대로 구현하는 세번째 프로젝트는 두번째 프로젝트 때와 마찬가지로 많은 시간을 할애했음에도 불구하고 결국 구현에 실패했습니다. 운영체제의 Memory Management 정책에 대해 이론적으로는 잘 안다고 생각했었는데 직접 구현하는 것은 약간 별개의 문제였습니다.
결국 운영체제 강의는 학업 성취는 높았지만 과제에서의 실패로 인해 좋은 성적을 받지는 못했습니다. 뒤늦게 생각했지만 저에게 있어서 생소했던 분야였기 때문에 헷갈리는 부분을 너무 스스로의 힘으로만 공부해서 해결하려 하지 않고 조교님이나 교수님께 질문을 드리면서 진행했더라면 과제를 더 수월하게 진행하고 더 많은 것을 배울 수 있지 않았을까 하고 되짚어봤습니다. 이때의 경험으로 인해, 공부를 할때 막히는 문제에 대해 스스로 해결할 수 있다면 매우 좋지만 상황에 따라 시간이 부족하거나 조언을 구하여 배움을 얻을 수 있는 상황이라면 거리낌 없이 질문을 하는 것이 좋다는 것을 절실히 느꼈습니다.
[지원 분야 관련 전문지식]
- 2인 1조로 프로젝트를 진행하여 2D RPG 게임을 개발했습니다.
- 구글의 페이지 랭크 알고리즘의 핵심함수를 Adjacent Matrix 방식과 Adjacent List 방식으로 구현했습니다.
- 검색 모델인 Language Model과 Vector Space Model을 기반으로 여러가지 스무딩 메소드와 최적의 파라미터 값을 구해서 사용하여 주어진 쿼리에 따라 주어진 모든 문서에 인덱스와 랭크를 매겨 랭크 점수에 따른 내림차순으로 출력하여 연관성이 높은 문서를 출력하고 그 정확도를 평가하는 프로그램이었습니다.
- 영어로 된 자연어 명령을 입력 받아 파싱툴을 통해 파싱하고 파싱된 품사에 필요한 각각의 태그를 붙인 뒤 태그의 조합 종류에 따라서 해당 입력을 분석했습니다. 분석된 입력 프레임에서 해당 명령의 카테고리, 의도, 관련 정보 등을 출력하는 프로그램을 개발했습니다. 다양한 예외 상황을 처리해야 했기 때문에 지속적인 테스트를 통해 문제점을 개선해 나가면서 구현했습니다.
- UI와 UX를 고려하여 사용자로 하여금 편리함과 즐거움을 느낄 수 있는 20대를 타겟으로 한 안드로이드 가계부 앱을 개발했습니다. 아이콘의 모양과, 위치, 색상의 일관성을 유지하여 애플리케이션의 아이덴터티를 유지고, 최소한의 필요 요소만 남기는 구성을 통해 사용의 편리함을 제공하였습니다.
- SIMD 병렬 프로그래밍의 연산 속도와 SISD 프로그래밍의 연산 속도를 비교하는 프로젝트였습니다. 특히 SIMD 병렬 프로그래밍을 구현하기 위해 총 3가지 방법으로 사용되었습니다. Assembly 언어로 직접 Low level에서 구현하기도 하고, C 언어에서 SIMD 프로그래밍을 위해 제공하는 Intrinsic Function을 통해 구현하기도 했고, C++에서 SIMD 프로그래밍을 위해 제공하는 Vector Class를 통해 구현하기도 했습니다. 이러한 총 4가지의 구현 방법을 행렬 곱셈 연산과, Shortest Path Algorithm을 사용하여 비교하고 분석했습니다.
- "텍스트" -> "암호화된 텍스트" -> "미디로 변환" 의 과정을 거치는 2중 암호화 모듈과 복호화 모듈을 C++로 개발하고 C#의 Windows Form을 사용하여 C++로 개발한 모듈들을 통합하여 윈도우용 프로그램으로 사용할 수 있도록 개발했습니다.
- 리눅스 기반의 분산 스트리밍용 분석 툴인 Apache S4를 사용하여 분산 스트리밍 환경에서 쏘아지는 많은 단어들 중에 찾고자 하여 지정해놓은 단어들만 골라서 스트리밍 횟수를 카운팅 하는 프로그램을 개발했습니다. 담당조교님이 일단 프로젝트를 내주시긴 했지만 S4에 대한 자료가 매우 부족하여 구현에 어려움이 있었습니다.
- C 언어로 Achro 보드의 시스템콜을 후킹하고, DVFS를 구현했습니다. Java로는 구현된 DVFS를 애플리케이션에서 사용할 수 있도록 해주는 안드로이드 애플리케이션을 개발했고 변경된 CPU 클락에 따라 벤치마크를 한 뒤 결과를 볼 수 있는 기능을 추가하여 안드로이드 애플리케이션을 개발했습니다.
- 리눅스 커널에서 시스템콜을 만들어보고, 가상의 CPU 객체를 생성하여 여러가지 프로세스 스케쥴링(FCFS, SJF, SRT)을 구현했습니다.
- Java와 MySQL을 연동하여 기초적 수준의 DB관리 프로그램을 개발했습니다.
- IEEE의 표준을 따라서 대학교 도서관 자리 예약 시스템에 관한 소프트웨어 요구사항 명세서를 작성하였습니다. 표준에서 요구하는 모든 사항을 충족시켜야 했기 때문에 1학기동안 많은 시간을 할애했습니다.
- [기기간의 상호작용을 통한 개인의 편의 제공 시스템]이라는 명칭의 특허 명세서를 직접 작성하여 제출했습니다.
[끈기와 긍정과 배려]
전 어렸을 때부터 운동을 좋아했습니다. 초등학교, 중학교, 고등학교, 지금까지도 운동을 하지 않고 살아온적이 없을정도로 운동을 매우 좋아합니다. 중학교 2학년때는 하프 마라톤도 뛰었습니다. 이렇게 운동을 좋아하는 덕분인지 저는 무슨 일을 할 때 아무리 어렵더라도 체력적으로 힘들거나 정신적으로 못버티거나 하는 경우가 매우 드뭅니다. 한번 시작을 했으면 끈기있게 밀어붙이고 난관에 부딪히더라도 어떻게든 버텨냅니다. 이러한 끈기로 인해 어떠한 일에 빠져들 때의 집중력 또한 매우 강한 편입니다.
또한 이러한 끈기를 더욱 강하게 만들어 줄 수 있는 긍정적인 성격도 갖고 있습니다. 사춘기 전까지만 해도 사소한 일에 화를 잘 내고 부정적으로 자주 생각했었지만 사춘기를 거치면서 저의 가치관이 많이 바뀌면서 매우 긍정적인 성격이 되었습니다. 따라서 힘든 상황을 직면하더라도 끈기와 긍정적인 성격을 통해서 쉽게 해결해나가고 또한 감정적으로 대처하지 않고 이성적으로 대처할 수 있는 성격입니다.
그와 더불어 사람을 배려하고 생각하는 마음을 항상 가지고 있습니다. 제가 항상 사람의 편의를 생각한다고 했는데 그 또한 이러한 성격의 연장선상에 있다고 보면 됩니다. 항상 남을 배려하다보니 인간관계를 형성할때도 트러블이 거의 없이 그 누구와도 잘 어울리기 때문에 원만한 관계를 유지할 수 있으며 혹시나 사이가 나빠지는 경우가 생기더라도 금방 풀어주고 먼저 사과를 하는 성격입니다. 따라서 LG전자 입사 후에도 다양한 동료들과 선임분들과도 유하게 잘 섞여들어가는 사원이 될 것입니다.
[슬로우 스타터]
전 장기적인 일을 진행할때 출발이 다소 느린 편입니다. 조금 여유를 가지는 성격인데 그로 인한 단점이라고 생각합니다. 예를 들어 고등학교때 1학년 때 성적이 상위 10% 대였다가 2학년 때는 상위 5%, 3학년 때는 상위 1%까지 올라갔었습니다. 대학 입학 후에도 1,2학년때의 학업 성취에 비해 3,4학년때의 학업 성취가 더 큽니다. 그래서 최근에는 이러한 느긋하게 시작하는 단점을 해결하기 위해 여러가지 방법을 시도해보았습니다. 그 결과로 한가지 유용한 해결방법을 찾았습니다.
장기적인 일을 여러 개의 짧은 단계로 나누어 진행했더니 단기적인 목표가 연속적으로 이어졌기때문에 느긋할 틈 없이 일의 페이스를 빠르게 올릴 수 있었습니다. 입사 후에도 이러한 해결 방법을 적용하여 프로젝트나 긴 목표를 스스로 짧게 단계적으로 설정하여 일의 능률을 비약적으로 올릴 수 있을거라 확신합니다.
[통합형 가전의 리더]
요즈음 가전 제품 시장은 예전과 달리 가전 제품에서 Software의 비중이 예전보다 점차 커져가면서 더 스마트해지고 있습니다. 그러므로 전자, 전기제품을 생산할때 단순히 하드웨어의 우월함으로만 승부하는 시대는 이제 끝났고 소프트웨어로 타업체와의 차별화를 해야 하는 시대라고 생각합니다. 더불어 우리의 가정속에 유비쿼터스가 점차 뿌리 내리고 있습니다. 그렇다면 이러한 변화를 모두 고려하여 생각 해봤을때 10년 뒤에는 지금과 다르게 어떻게 바뀌게 될지 예상해볼 수 있습니다.
제가 생각하기에 10년 뒤에는 TV, 냉장고, 세탁기, 컴퓨터, 전화기 등의 다양한 전자, 전기제품들이 따로 생산, 관리 되는것이 아니라 합쳐져서 통합형 제품들이 등장할 것 같습니다. 예를 들어 TV모드로 TV를 보다가 모드를 변경하면 TV가 컴퓨터가 되고, 동시 제어 모드를 통해 디스플레이를 분할하여 TV와 컴퓨터 두 가지를 동시에 제어할 수 있고, 또 그 상태에서 디스플레이를 옆으로 밀면 그 뒤에 냉장고가 있고, 디스플레이를 창문모드로 바꾸면 투명한 디스플레이 위에 영상이 맺히게 되고, TV 리모콘으로 전화 모드를 선택하여 전화를 할 수 있거나 하는 등의 방식으로 변화 할 것 같습니다. 또한 이러한 변화에 발맞추어 동공인식, 모션인식, 음성인식 등을 아우를 수 있는 인공지능 시스템 역시 발달하여 원활한 제어를 가능하게 해줄 것이라고 생각합니다.
이러한 통합 제어를 위해서 Software는 지금보다도 더 정교해져야 할 것이며 Software의 영향력과 중요도는 그 후로도 계속 커질 것입니다.저는 이러한 혁신적인 통합형 가전제품을 제어하는 Software 시스템을 개발하고 싶습니다. 또한 Software의 영향력이 커지면 커질수록 Software의 안정성과 리스크 관리 등의 문제가 더욱 중요시 될 것이기 때문에 저의 문제해결능력을 바탕으로 하여 개발자를 잘 아는 프로젝트 관리자가 되어 소프트웨어 프로젝트 관리에 대한 전문성과 소프트웨어 개발에 대한 전문성을 모두 갖춘 통합형 인재가 되고 싶습니다.