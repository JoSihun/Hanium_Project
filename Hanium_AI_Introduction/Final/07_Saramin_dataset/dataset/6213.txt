SK텔레콤㈜
SW(소프트웨어)
A.	2014년 전산소 개발실에서 전투기 사고 재현 영상 제작 업무 진행
B.	세차례의 방학동안 독서 기록 안드로이드 어플리케이션 개발
[프로젝트의 디테일을 높이다]
전산소 개발실에서 근무할 당시 프로그램 개발을 담당하고 있었으나 전산소 내에서 3D 모델링 경험이 있는 사람이 저밖에 없었던 관계로 간혹 3D 관련 업무도 맡아서 했습니다. 맡은 업무 중 하나는 전투기 조종사들의 교육을 위해서 실제 사고 사례를 바탕으로 3D 재현 영상을 제작하는 것이었습니다.
요구사항은 블랙박스 데이터를 바탕으로 전투기가 궤적을 따라 움직이는 모습을 보여주고 각 상황에 맞는 보충설명을 자막으로 넣어주는 것이었습니다. 요구사항은 필수적인 부분만 만족하면 되었기에 간단한 작업이었습니다. 하지만 한두 건의 영상을 제작하면서 디테일에 대한 아쉬움이 있었습니다. 전투기가 바다에 빠지는 모습도 현실감이 없었고, 주변 지형의 텍스처도 위성사진을 덮어씌운 것에 불과하였습니다. 그래서 저는 프로젝트의 디테일을 최대한 살려서 진행해보자는 목표를 세웠습니다. 전투기가 바다에 빠질 때 물보라와 물의 일렁임을 표현하고, 육지에 추락한 경우에는 주변 지형지물을 추가로 모델링 하여 현실감을 높이고자 했습니다. 하지만 저는 프로그래밍을 주 업무로 했고 3D 모델링은 개인적인 취미로 했던 터라 전체적인 디테일을 높일 만큼 3D 엔진 툴에 대해서 자세히 알지 못했습니다. 그래서 이 기회에 공부를 추가로 해서 실력을 늘리고자 마음먹었습니다. Unreal Engine이라는 엔진 툴과 3Ds Max를 사용했는데, 관련 포럼들을 찾아보면서 제가 원하는 기술들을 익혔습니다. 물의 일렁임 효과와 전투기를 파편화시키는 방법을 배웠고, 다양한 플러그인을 알게 되어 여러 건물이 밀집된 모습을 쉽게 구현하는 기술을 배웠습니다.
결과적으로 초기 영상과 비교하면 어색함이 많이 사라지고 디테일이 높은 결과물을 만들 수 있었습니다. 의뢰한 측에서도 영상이 상당히 발전된 모습에 만족하여 저 역시 좋은 평가를 받을 수 있었습니다. 또한, 사소한 것에도 신경을 써서 완성도를 높이는 최선을 지향하는 것의 가치를 알 수 있었습니다.
A.	2014년 전산소에서 GPS 교란 탐지 체계의 문제점 해결
B.	2014년 전산소에서 기상 3D 브리핑 제작 중 구름 모델링 문제 해결
[GPS 교란 탐지 체계의 문제점 해결]
전산소 개발실에서 GPS 전파 교란 탐지 체계를 담당하는 팀에 속해 있었습니다. 전국 주요 방공포대에 설치된 GPS 기기와 연결된 프로그램이 서버로 전송해주는 데이터를 바탕으로 북한으로부터의 전파교란 공격을 탐지하는 체계였습니다. 이 체계를 운영하는 과정에는 가장 큰 문제점이 하나 있었습니다. 각 부대에서 간혹 컴퓨터 문제로 재부팅이 되거나 예기치 못한 오류로 인해 서버로 데이터를 전송해주는 GPS 프로그램이 종료되는 경우였습니다. 이런 저희가 직접 해당 부대에 연락을 취하고, 그곳에서는 다시 프로그램을 정상 작동시켜야 했습니다. 이런 상황이 일과 후에도 빈번하게 일어났기 때문에 다시 사무실에 출근해야 하는 상황이 잦았습니다.
근본적으로 GPS 프로그램의 오류를 개선하는 것이 최선이었지만, 소스 코드가 체계적으로 관리되지 않았던 탓에 쉬운 일이 아니었습니다. 그래서 저는 해당 GPS 프로그램이 24시간 이상이 없도록 제어해주는 프로그램을 개발하는 것을 건의했습니다. 프로그램을 추가로 배포해야 하는 부담이 있었지만, 문제를 쉽게 해결할 수 있었기 때문에 팀장님 결재를 받을 수 있었습니다. 먼저 구체적으로 어떤 기능을 넣을지 회의를 했습니다. 자동으로 시작프로그램에 추가하여 부팅 시 자동실행이 되도록 하고, 주기적으로 전체 프로세스 목록을 검사하여 GPS 프로그램이 실행됐는지 체크하도록 했습니다. 또한, 프로그램과 GPS 기기와의 연결이 끊겼을 때 자동으로 재연결해주는 기능을 넣기로 했습니다. 이를 위해서 프로그램을 제어하는 방법을 알아보았고, 프로세스의 핸들값을 이용하면 된다는 것을 알게 됐습니다. 핸들값을 이용하기 위해서 관련 윈도우 API를 찾아 공부했고, Spy++ 프로그램의 사용법도 익혔습니다. 구현이 어려운 작업이 아니었기 때문에 개발은 금방 마칠 수 있었습니다. 이 프로그램을 통해서 병사들이 일과 후에 불필요하게 사무실을 출근하는 일이 줄었고, 관련된 저희 업무도 많이 줄일 수 있었습니다.
A.	2015년 8박 9일 태국 여행 일정 짜기
B.	2016년 여름방학 알고리즘 스터디 계획 및 진행
[8박 9일 태국 여행 일정 짜기]
2014년 말 동료 5명이 사람 수를 맞추기 위해서 저에게 태국 여행을 같이 가는 것을 권했습니다. 2015년 1월 말의 8박 9일 일정이었는데 마침 시간과 비용이 적절하여 함께 가기로 했습니다. 저는 여행을 갈 때 날짜별 일정과 교통편, 예상 지출까지 세부적으로 계획을 짜고 가는 것을 선호합니다. 이번 여행은 해외여행일 뿐만 아니라 8박 9일이라는 장기간의 여행이었기 때문에 일반적인 국내 여행의 계획을 짤 때보다 신경을 더 써야 한다고 생각했습니다.
특히 장기간의 계획을 세워야 했기에 한두 명으로는 역부족하다고 생각하여 다 같이 준비를 하자고 제의하였습니다. 하지만 그중 두 동료가 자신들은 이런 것을 잘하지 못하니, 정해진 계획을 따르는 대신 자신들은 제외해달라 했습니다. 다 같이 가는 여행이었고, 많은 조사가 필요한 일이었기 때문에 모두가 참여해야 한다고 생각했습니다. 다행히도 남은 4명은 서로 역할 분담을 하기 좋은 구성이어서 먼저 역할을 나누었습니다. 그중 해외여행을 자주 가는 두 동료가 있었는데, 한 명은 저가 항공사 프로모션을 이용하여 자주 여행을 다녔기 때문에 태국 비행기 티켓도 저렴하게 구할 수 있었습니다. 나머지 한 명은 미리 정한 주요 도시에서 묵을 가성비가 좋은 숙박업소를 조사하고 예약하는 일을 담당했습니다. 저와 다른 한 동료는 명절이나 각종 체육대회, 크리스마스 행사 일정 짜는 것을 좋아했기 때문에 도시별로 분담하여 각 지역 이동 방법이나 예상 시간, 비용 등을 고려하여 일정을 짜기로 했습니다. 이렇게 역할 분담한 내용을 바탕으로 그 두 동료에게 최소한의 역할이라도 맡아야 한다고 설득하였고, 비교적 어렵지 않은 관광 명소 조사를 위주로 하는 역할을 맡도록 했습니다.
그 이후로는 다행히 모두 적극적으로 참여해주어 순조롭게 여행 계획을 짤 수 있었습니다. 또한, 이 과정에서 사소한 마찰이 있었지만, 각자의 장점을 살려서 성공적으로 여행을 마칠 수 있었습니다.
[독서 기록 어플리케이션 개발]
2학년 겨울방학 때, 안드로이드 개발 경험을 쌓는 것을 목표로 잡았습니다. 저는 방학처럼 시간적 여유가 있을 때 책 읽는 것을 즐겨서 따로 엑셀 파일에 기록하고 있었는데, 이 방식에 불편함을 느껴 독서 기록 어플리케이션을 만들기로 했습니다.
먼저 안드로이드 개발 경험이 전혀 없었기 때문에 관련 포럼과 블로그를 찾아다니며 기초부터 배우기 시작했습니다. 또한, 혼자서 디자인 작업도 맡아야 했기에 구글의 가이드라인에 맞는 머티리얼 디자인도 알아보고, 다양한 UI를 참고할 수 있는 사이트들을 돌아보며 어떤 UI가 사용자들이 이용하기 편할지 고민했습니다. 이후엔 이미 마켓에 출시된 유사한 어플리케이션을 설치하여 직접 사용해보면서 각각의 편리한 점과 불편한 점을 파악해보고, 리뷰들을 살펴보면서 사용자들이 어떤 기능을 주로 원하는지 사전에 조사하여 사용자의 만족도를 높이기 위한 노력을 했습니다.
겨울, 여름방학을 거쳐 세부 기능과 디자인을 마무리하여 출시하였고 기대 이상의 좋은 반응을 얻었습니다. 사용자들과 소통을 위해 카카오톡 옐로아이디도 만들었는데, 세 번째 방학 때는 이 피드백을 통해 개선점을 보완하여 완성도를 높였습니다. 이처럼 좋은 반응을 얻을 수 있던 것은 개발뿐만 아니라 디자인 공부나 사용자들의 요구사항을 철저히 파악하는 등 철저한 준비과정과 사용자와의 원활한 소통 덕분이라고 생각합니다.
[bit Torrent 구현]
네트워크와 데이터 통신에 대한 개념 파악이 중요하다고 생각하여 3학년 2학기에 ‘컴퓨터 네트워크’ 과목을 수강하였습니다. 해당 수업에서 ‘bit Torrent’를 구현하는 것이 프로그래밍 과제로 나왔었습니다. 평소 bit Torrent의 동작 구조는 알고 있었지만 직접 구현을 해보려고 하니 쉬운 작업이 아니었습니다. 기존에 주로 개발하던 프로그램은 문자 위주 전송이나 순차적인 데이터 전송이었기 때문에 bit Torrent처럼 데이터를 청크 단위로 나누어 전송하는 방식에 익숙하지 않았습니다.
bit Torrent의 Swarming 프로토콜을 좀 더 정확히 이해하기 위해서 교재를 비롯하여 각종 외국 대학의 교육 자료를 찾았습니다. 또한, GitHub를 통해서 다른 개발자들은 어떤 방식으로 구현했는지 살펴봤습니다. 이 과정을 통해서 저만의 수도코드를 작성해보았고, 시뮬레이션 상황을 종이에 직접 그려보면서 시행착오를 거쳤습니다. 결국, 성공적으로 bit Torrent를 구현할 수 있었고, 완성도를 높이기 위해 로그를 보여주는 CUI에도 많은 투자하여 프로젝트를 마무리했습니다.
여러 프로젝트를 거치면서 어려워하는 개념이나 알고리즘을 다양한 자료와 타인의 코드 분석을 통해 배우는 공부 방법을 익힐 수 있었고, 새로운 내용을 접할 때마다 이와 같은 방식은 저에게 큰 도움이 됐습니다.